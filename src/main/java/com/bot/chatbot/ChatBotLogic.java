package com.bot.chatbot;

import javafx.scene.control.ListView;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ChatBotLogic implements IBot {
    private static final String HISTORY_DIR = "user_histories"; // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    private static final String CURRENCY_API_URL = "https://api.exchangerate-api.com/v4/latest/USD"; // API –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    private static final String API_KEY = ""; // –ö–ª—é—á API

    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private static final String[] POPULAR_CURRENCIES = {
            "USD", "EUR", "GBP", "JPY", "CNY",
            "CHF", "CAD", "AUD", "NZD", "TRY"
    };

    private String userName; // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private List<Message> messageHistory; // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    private Pattern currencyPattern; // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç

    public ChatBotLogic(String userName) {
        this.userName = userName;
        this.messageHistory = new ArrayList<>();
        // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π)
        this.currencyPattern = Pattern.compile("(?i)(–∫—É—Ä—Å –≤–∞–ª—é—Ç|exchange rates)");
        createHistoryDirectory(); // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    }

    // –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
    private void createHistoryDirectory() {
        try {
            Path path = Paths.get(HISTORY_DIR);
            if (!Files.exists(path)) {
                Files.createDirectory(path); // –°–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            }
        } catch (IOException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: " + e.getMessage());
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    @Override
    public String getResponse(String message) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        if (message.equalsIgnoreCase("/help")) {
            return getHelpCommands();
        } else if (message.equalsIgnoreCase("–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?")) {
            return getCurrentTime();
        } else if (message.matches("\\d+\\s*\\*\\s*\\d+")) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–º–Ω–æ–∂–µ–Ω–∏–µ
            return handleMultiplication(message);
        } else if (message.equalsIgnoreCase("–ø—Ä–∏–≤–µ—Ç") || message.equalsIgnoreCase("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ")) {
            return getGreeting();
        } else if (currencyPattern.matcher(message).matches()) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
            return handleCurrencyRequest();
        }
        return getDefaultResponse(); // –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    private String getCurrentTime() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        return "–°–µ–π—á–∞—Å " + LocalTime.now().format(formatter);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —É–º–Ω–æ–∂–µ–Ω–∏—è
    private String handleMultiplication(String equation) {
        try {
            String[] parts = equation.split("\\s*\\*\\s*"); // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ *
            int num1 = Integer.parseInt(parts[0].trim());
            int num2 = Integer.parseInt(parts[1].trim());
            int result = num1 * num2;
            return String.format("%d * %d = %d", num1, num2, result);
        } catch (Exception e) {
            return "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—á–∏—Å–ª–æ * —á–∏—Å–ª–æ' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12 * 4)";
        }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    private String getGreeting() {
        return "–ü—Ä–∏–≤–µ—Ç, " + userName + "! –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.";
    }

    // –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    private String getDefaultResponse() {
        return "–ù–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.";
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
    private String handleCurrencyRequest() {
        try {
            String response = getCurrencyRates(); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API
            if (response != null) {
                return buildCurrencyRatesMessage(response); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: " + e.getMessage());
        }
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    // –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
    private String buildCurrencyRatesMessage(String json) {
        StringBuilder sb = new StringBuilder();
        sb.append("üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ RUB:\n\n");

        // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD –∫ RUB
        double usdToRub = parseCurrencyRate(json, "RUB");
        if (usdToRub == 0) {
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USD/RUB";
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
        for (String currency : POPULAR_CURRENCIES) {
            if (currency.equals("USD")) {
                sb.append(String.format("üá∫üá∏ USD/RUB: %.2f\n", usdToRub));
                continue;
            }

            double currencyToUsd = parseCurrencyRate(json, currency);
            if (currencyToUsd > 0) {
                double currencyToRub = usdToRub / currencyToUsd;
                sb.append(String.format(getCurrencyFlag(currency) + " %s/RUB: %.2f\n",
                        currency, currencyToRub));
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        sb.append("\n‚è≥ –î–∞–Ω–Ω—ã–µ –Ω–∞ " + LocalDateTime.now().format(
                DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));
        return sb.toString();
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –≤–∞–ª—é—Ç—ã
    String getCurrencyFlag(String currency) {
        switch (currency) {
            case "EUR": return "üá™üá∫";
            case "GBP": return "üá¨üáß";
            case "JPY": return "üáØüáµ";
            case "CNY": return "üá®üá≥";
            case "CHF": return "üá®üá≠";
            case "CAD": return "üá®üá¶";
            case "AUD": return "üá¶üá∫";
            case "NZD": return "üá≥üáø";
            case "TRY": return "üáπüá∑";
            default: return "";
        }
    }

    // –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç –æ—Ç API
    private String getCurrencyRates() throws IOException {
        URL url = new URL(CURRENCY_API_URL + "?apikey=" + API_KEY);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.setConnectTimeout(5000); // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 5 —Å–µ–∫
        connection.setReadTimeout(5000); // –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è 5 —Å–µ–∫

        try {
            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                StringBuilder response = new StringBuilder();
                try (BufferedReader in = new BufferedReader(
                        new InputStreamReader(connection.getInputStream()))) {
                    String inputLine;
                    while ((inputLine = in.readLine()) != null) {
                        response.append(inputLine); // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
                    }
                }
                return response.toString();
            }
        } finally {
            connection.disconnect(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        }
        return null;
    }

    // –ü–∞—Ä—Å–∏—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∏–∑ JSON
    double parseCurrencyRate(String json, String currency) {
        Pattern pattern = Pattern.compile("\"" + currency + "\":(\\d+\\.?\\d*)");
        Matcher matcher = pattern.matcher(json);
        return matcher.find() ? Double.parseDouble(matcher.group(1)) : 0.0;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    @Override
    public String getHelpCommands() {
        return """
            üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            
            –û—Å–Ω–æ–≤–Ω—ã–µ:
            ‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            ‚Ä¢ –ü—Ä–∏–≤–µ—Ç - –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º
            ‚Ä¢ –ö–æ—Ç–æ—Ä—ã–π —á–∞—Å? - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            
            –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:
            ‚Ä¢ —á–∏—Å–ª–æ * —á–∏—Å–ª–æ - —É–º–Ω–æ–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä: 5 * 3)
            
            –§–∏–Ω–∞–Ω—Å—ã:
            ‚Ä¢ –∫—É—Ä—Å –≤–∞–ª—é—Ç - –∫—É—Ä—Å—ã 10 –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é
            
            –î–ª—è –≤—ã—Ö–æ–¥–∞ –∑–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ —á–∞—Ç–∞.""";
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    @Override
    public void saveMessage(Message message) {
        messageHistory.add(message);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
    @Override
    public void loadHistoryFromFile(ListView<Message> messageListView) {
        String filename = HISTORY_DIR + File.separator + "history_" + userName + ".dat";
        File file = new File(filename);

        if (file.exists()) {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) {
                List<Message> history = (List<Message>) ois.readObject();
                messageHistory = history;
                messageListView.getItems().addAll(history); // –î–æ–±–∞–≤–ª—è–µ–º –≤ ListView
                return;
            } catch (Exception e) {
                System.err.println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: " + e.getMessage());
            }
        }

        // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é
        messageHistory = new ArrayList<>();
        Message welcomeMessage = new Message("–ë–æ—Ç",
                "–ü—Ä–∏–≤–µ—Ç, " + userName + "! –Ø —á–∞—Ç-–±–æ—Ç.\n–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm")), false);
        messageHistory.add(welcomeMessage);
        messageListView.getItems().add(welcomeMessage);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
    @Override
    public void saveHistoryToFile() {
        String filename = HISTORY_DIR + File.separator + "history_" + userName + ".dat";
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(messageHistory); // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
        } catch (IOException e) {
            System.err.println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: " + e.getMessage());
        }
    }
}