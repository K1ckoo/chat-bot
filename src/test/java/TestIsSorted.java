package com.bot.chatbot;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import static org.junit.jupiter.api.Assertions.*;
import java.io.*;
import java.nio.file.*;
import javafx.collections.ObservableList;
import javafx.scene.control.ListView;

public class TestIsSorted {
    private ChatBotLogic bot;
    private static final String TEST_USER = "TestUser";
    private static final String TEST_HISTORY_FILE = "user_histories/history_" + TEST_USER + ".dat";

    @BeforeEach
    void setUp() {
        bot = new ChatBotLogic(TEST_USER);
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
        try {
            Files.deleteIfExists(Paths.get(TEST_HISTORY_FILE));
        } catch (IOException e) {
            System.err.println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }

    @AfterEach
    void tearDown() {
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        try {
            Files.deleteIfExists(Paths.get(TEST_HISTORY_FILE));
        } catch (IOException e) {
            System.err.println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }

    // –¢–µ—Å—Ç—ã –¥–ª—è ChatBotLogic
    @Test
    void testGetResponse_HelpCommand() {
        String response = bot.getResponse("/help");
        assertTrue(response.contains("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"));
        assertTrue(response.contains("/help"));
        assertTrue(response.contains("–∫—É—Ä—Å –≤–∞–ª—é—Ç"));
    }

    @Test
    void testGetResponse_Multiplication() {
        assertEquals("5 * 3 = 15", bot.getResponse("5 * 3"));
        assertEquals("10 * 10 = 100", bot.getResponse("10*10"));
        assertTrue(bot.getResponse("5 * abc").contains("–û—à–∏–±–∫–∞"));
    }

    @Test
    void testGetResponse_TimeRequest() {
        String response = bot.getResponse("–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?");
        assertTrue(response.startsWith("–°–µ–π—á–∞—Å"));
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (HH:mm)
        assertTrue(response.matches("–°–µ–π—á–∞—Å \\d{2}:\\d{2}"));
    }

    // –¢–µ—Å—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
    @Test
    void testSaveAndLoadHistory() {
        ListView<Message> listView = new ListView<>();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏ (–¥–æ–ª–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        bot.loadHistoryFromFile(listView);
        ObservableList<Message> messages = listView.getItems();
        assertEquals(1, messages.size());
        assertFalse(messages.get(0).isUser());
        assertTrue(messages.get(0).getText().contains("–ü—Ä–∏–≤–µ—Ç"));

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        Message userMsg = new Message(TEST_USER, "–¢–µ—Å—Ç", "12:00", true);
        Message botMsg = new Message("–ë–æ—Ç", "–û—Ç–≤–µ—Ç", "12:01", false);

        bot.saveMessage(userMsg);
        bot.saveMessage(botMsg);
        bot.saveHistoryToFile();

        // –û—á–∏—â–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–Ω–æ–≤–∞
        listView.getItems().clear();
        bot.loadHistoryFromFile(listView);

        assertEquals(3, listView.getItems().size()); // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + 2 —Å–æ–æ–±—â–µ–Ω–∏—è
        assertEquals("–¢–µ—Å—Ç", listView.getItems().get(1).getText());
        assertEquals("–û—Ç–≤–µ—Ç", listView.getItems().get(2).getText());
    }

    @Test
    void testHistoryFileOperations() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path dirPath = Paths.get("user_histories");
        assertTrue(Files.exists(dirPath));
        assertTrue(Files.isDirectory(dirPath));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏
        bot.saveHistoryToFile();
        assertTrue(Files.exists(Paths.get(TEST_HISTORY_FILE)));
    }

    // –¢–µ—Å—Ç—ã –¥–ª—è Message
    @Test
    void testMessageCreation() {
        Message msg = new Message("User", "Hello", "12:00", true);

        assertEquals("User", msg.getAuthor());
        assertEquals("Hello", msg.getText());
        assertEquals("12:00", msg.getTime());
        assertTrue(msg.isUser());

        Message botMsg = new Message("Bot", "Hi", "12:01", false);
        assertFalse(botMsg.isUser());
    }

    @Test
    void testMessageToString() {
        Message msg = new Message("User", "Test", "12:00", true);
        assertEquals("[12:00] User: Test", msg.toString());
    }

    // –¢–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª—é—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–º–æ–∫–∏)
    @Test
    void testCurrencyFunctions() {
        // –¢–µ—Å—Ç–æ–≤—ã–π JSON –æ—Ç–≤–µ—Ç –æ—Ç API
        String testJson = "{\"USD\":1.0,\"EUR\":0.85,\"GBP\":0.75,\"RUB\":75.5}";

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫—É—Ä—Å–æ–≤
        assertEquals(0.85, bot.parseCurrencyRate(testJson, "EUR"), 0.001);
        assertEquals(75.5, bot.parseCurrencyRate(testJson, "RUB"), 0.001);
        assertEquals(0.0, bot.parseCurrencyRate(testJson, "JPY"), 0.001); // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–∞–ª—é—Ç–∞

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –≤–∞–ª—é—Ç
        assertEquals("üá™üá∫", bot.getCurrencyFlag("EUR"));
        assertEquals("üá¨üáß", bot.getCurrencyFlag("GBP"));
        assertEquals("", bot.getCurrencyFlag("USD")); // –î–ª—è USD —Ñ–ª–∞–≥–∞ –Ω–µ—Ç
    }

    // –¢–µ—Å—Ç—ã –¥–ª—è LoginController (–∏–º–∏—Ç–∞—Ü–∏—è)
    @Test
    void testLoginController() {
        MainApp mainApp = new MainApp();
        LoginController controller = new LoginController();
        controller.setMainApp(mainApp);

        // –ò–º–∏—Ç–∞—Ü–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        controller.userNameField = new javafx.scene.control.TextField();
        controller.userNameField.setText(TEST_USER);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥–∞
        assertDoesNotThrow(() -> controller.handleLogin());
        assertEquals(TEST_USER, mainApp.getUserName());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç–æ–≥–æ –∏–º–µ–Ω–∏
        controller.userNameField.setText("");
        assertDoesNotThrow(() -> controller.handleLogin());
    }

    // –¢–µ—Å—Ç—ã –¥–ª—è ChatController (–∏–º–∏—Ç–∞—Ü–∏—è)
    @Test
    void testChatController() {
        MainApp mainApp = new MainApp();
        mainApp.login(TEST_USER);

        ChatController controller = new ChatController();
        controller.setMainApp(mainApp);
        controller.setUserName(TEST_USER);
        controller.messageListView = new ListView<>();
        controller.inputTextArea = new javafx.scene.control.TextArea();

        // –ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞
        assertDoesNotThrow(() -> controller.initChat());
        assertFalse(controller.messageListView.getItems().isEmpty());

        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        controller.inputTextArea.setText("–ü—Ä–∏–≤–µ—Ç");
        assertDoesNotThrow(() -> controller.sendMessage());
        assertEquals(2, controller.messageListView.getItems().size()); // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –æ—Ç–≤–µ—Ç

        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
        assertDoesNotThrow(() -> controller.clearChat());
        assertEquals(1, controller.messageListView.getItems().size()); // –¢–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    }
}